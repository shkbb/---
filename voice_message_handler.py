import requests
from io import BytesIO
from aiogram.types import InputFile
from pydub import AudioSegment
from ytmusicapi import YTMusic
import yt_dlp

ytmusic = YTMusic()

async def get_audio_preview(preview_url, track_name, artist_name):
    print(f"üîç –û—Ç—Ä–∏–º—É—î–º–æ –∞—É–¥—ñ–æ-–ø—Ä–µ–≤'—é –∑–∞ URL: {preview_url}")
    try:
        if preview_url:
            response = requests.get(preview_url)
            print(f"üéµ –°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ: {response.status_code}")
            if response.status_code == 200:
                audio = AudioSegment.from_file(BytesIO(response.content), format="mp3")
                buffer = BytesIO()
                audio.export(buffer, format="ogg", codec="libopus")
                buffer.seek(0)
                print("‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return InputFile(buffer, filename="preview.ogg")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—É–¥—ñ–æ")
        else:
            print(f"üîé –®—É–∫–∞—î–º–æ –ø—Ä–µ–≤‚Äô—é –Ω–∞ YouTube Music –¥–ª—è: {track_name} ‚Äì {artist_name}")
            video_id = search_youtube_music(track_name, artist_name)
            if video_id:
                audio_data = download_youtube_audio(video_id)
                if audio_data:
                    return convert_to_voice(audio_data)
                else:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ –∑ YouTube Music")
            else:
                print("‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ YouTube Music")
    except Exception as e:
        print(f"üö® –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
    return None

def download_audio(url):
    """ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞—É–¥—ñ–æ—Ñ–∞–π–ª –∑–∞ URL """
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return BytesIO(response.content)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ: {e}")
    return None

def search_youtube_music(track_name, artist_name):
    """ –®—É–∫–∞—î —Ç—Ä–µ–∫ —É YouTube Music —ñ –ø–æ–≤–µ—Ä—Ç–∞—î ID –≤—ñ–¥–µ–æ """
    try:
        print(f"üîé –®—É–∫–∞—î–º–æ –ø—Ä–µ–≤‚Äô—é –Ω–∞ YouTube Music –¥–ª—è: {track_name} ‚Äì {artist_name}")
        search_results = ytmusic.search(f"{track_name} {artist_name}", filter="songs")
        if search_results:
            return search_results[0]['videoId']
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –Ω–∞ YouTube Music: {e}")
    return None

def download_youtube_audio(video_id):
    """ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∞—É–¥—ñ–æ –∑ YouTube –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é yt-dlp """
    url = f"https://www.youtube.com/watch?v={video_id}"
    ydl_opts = {
        'format': 'bestaudio/best',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'outtmpl': '-',
        'quiet': True,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            audio_url = info['url']
            return download_audio(audio_url)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ YouTube: {e}")
    return None

def convert_to_voice(audio_data):
    """ –ö–æ–Ω–≤–µ—Ä—Ç—É—î –∞—É–¥—ñ–æ —É —Ñ–æ—Ä–º–∞—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è """
    try:
        audio = AudioSegment.from_file(audio_data, format="mp3")
        buffer = BytesIO()
        audio.export(buffer, format="ogg", codec="libopus")
        buffer.seek(0)
        return InputFile(buffer, filename="preview.ogg")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    return None
